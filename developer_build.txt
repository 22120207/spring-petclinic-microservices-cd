pipeline {
    agent {
        label 'k8s-master'
    }

    parameters {
        string(name: 'CUSTOMERS_SERVICE', defaultValue: 'main', description: 'Branch for customers service')
        string(name: 'VETS_SERVICE',      defaultValue: 'main', description: 'Branch for vets service')
        string(name: 'VISITS_SERVICE',    defaultValue: 'main', description: 'Branch for visits service')
        string(name: 'GENAI_SERVICE',     defaultValue: 'main', description: 'Branch for genai service')
    }

    environment {
        DOCKER_USERNAME = "tienminhktvn2"
        GITHUB_USERNAME = "22120207"
        PROJECT_NAME = "spring-petclinic-microservices"
        SCM_REPO_URL = "https://github.com/${GITHUB_USERNAME}/${PROJECT_NAME}-cd.git"
        HELM_CHART_DIR = "${PROJECT_NAME}-helm-chart"
        HELM_REPO_URL = "https://github.com/${GITHUB_USERNAME}/${HELM_CHART_DIR}.git"
        K8S_NAMESPACE = "review"
    }

    stages {
        stage('Checkout SCM') {
            steps {
                script {
                    sh "git clone ${env.SCM_REPO_URL}"
                }
            }
        }

        stage('Checkout Helm Repository') {
            steps {
                script {
                    sh "git clone ${env.HELM_REPO_URL}"
                }
            }
        }

        stage('Create values file') {
            steps {
                dir("${env.PROJECT_NAME}-cd") {
                    script {
                        def modules = [
                            [name: 'spring-petclinic-customers-service', branch: params.CUSTOMERS_SERVICE],
                            [name: 'spring-petclinic-vets-service',      branch: params.VETS_SERVICE],
                            [name: 'spring-petclinic-visits-service',    branch: params.VISITS_SERVICE],
                            [name: 'spring-petclinic-genai-service',            branch: params.GENAI_SERVICE]
                        ]

                        sh 'git fetch --all --tags'

                        def moduleImageTags = [:]

                        modules.each { m ->
                            def branchName = m.branch

                            // Get the first 8 characters of the SHA Git Commit
                            def gitCommitHash = sh(script: "git rev-parse --short=8 origin/${branchName}", returnStdout: true).trim()

                            def imageTag = 'latest'

                            if (m.branch != 'main') {
                                imageTag = gitCommitHash
                            }

                            echo "Module: ${m.name}, Branch: ${branchName}, Determined Tag: ${imageTag}"

                            moduleImageTags[m.name] = imageTag
                        }

def valuesContent = """namespace: ${env.K8S_NAMESPACE}-v${env.BUILD_ID}

images:
    genaiService:
        repository: ${env.DOCKER_USERNAME}/spring-petclinic-genai-service
        tag: ${moduleImageTags['spring-petclinic-genai-service']}
    customersService:
        repository: ${env.DOCKER_USERNAME}/spring-petclinic-customers-service
        tag: ${moduleImageTags['spring-petclinic-customers-service']}
    vetsService:
        repository: ${env.DOCKER_USERNAME}/spring-petclinic-vets-service
        tag: ${moduleImageTags['spring-petclinic-vets-service']}
    visitsService:
        repository: ${env.DOCKER_USERNAME}/spring-petclinic-visits-service
        tag: ${moduleImageTags['spring-petclinic-visits-service']}"""

                        def valuesFileName = "values-review-v${env.BUILD_ID}.yaml"

                        echo "Generated ${valuesFileName} content:\n${valuesContent}"

                        writeFile(file: "${WORKSPACE}/${env.HELM_CHART_DIR}/${valuesFileName}", text: valuesContent)
                        echo "Created values file: ${WORKSPACE}/${env.HELM_CHART_DIR}/${valuesFileName}"
                    }
                }
            }
        }

        stage('Deploy with Helm') {
            steps {
                dir("${env.HELM_CHART_DIR}") {
                    script {
                        def helmReleaseName = "spring-petclinic-${env.K8S_NAMESPACE}-v${env.BUILD_ID}"

                        def namespace = "${env.K8S_NAMESPACE}-v${env.BUILD_ID}"

                        def valuesFileName = "values-${env.K8S_NAMESPACE}-v${env.BUILD_ID}.yaml"

                        sh "kubectl create namespace ${namespace} --dry-run=client -o yaml | kubectl apply -f -"

                        withCredentials([usernamePassword(
                            credentialsId: 'DOCKER_HUB_CREDENTIALS',
                            usernameVariable: 'DOCKER_USER',
                            passwordVariable: 'DOCKER_PASS'
                        )]) {
                            sh """
                            kubectl create secret docker-registry dockerhub-cred \\
                                --docker-server=https://index.docker.io/v1/ \\
                                --docker-username=${DOCKER_USER} \\
                                --docker-password=${DOCKER_PASS} \\
                                --docker-email=caotienminhktvn2@gmail.com \\
                                -n ${namespace} \\
                            --dry-run=client -o yaml | kubectl apply -f -
                            """
                        }

                        def helmCommand = "helm upgrade --install ${helmReleaseName} ${env.HELM_CHART_DIR} --values ${env.HELM_CHART_DIR}/values.yaml -f ${valuesFileName} -n ${namespace}"

                        sh "${helmCommand}"
                    }
                }
            }
        }

        stage('Deployed Results') {
            steps {
                script {
                    def namespace = "${env.K8S_NAMESPACE}-v${env.BUILD_ID}"

                    def svcName = "api-gateway"
                    
                    def apiGatewayIngress = "spring-petclinic.${namespace}.api-gateway.com"

                    def publicIp = sh(
                        script: 'curl -s ifconfig.me',
                        returnStdout: true
                    ).trim()

                    def nodePort = sh(
                        script: """kubectl get svc ${svcName} -n ${namespace} --no-headers | awk '{print \$5}' | cut -d: -f2 | cut -d/ -f1""",
                        returnStdout: true
                    ).trim()

                    echo "Add this line into your c:\\Windows\\System32\\Drivers\\etc\\hosts file: ${publicIp} ${apiGatewayIngress}"

                    echo "Enter this URL into your browser for testing: http://${apiGatewayIngress}:31050"

                    echo "Or enter this URL: http://${publicIp}:${nodePort}"
                }
            }
        }
        stage('Trigger Cleanup Link') {
            steps {
                script {
                    def namespace = "${env.K8S_NAMESPACE}-v${env.BUILD_ID}"
                    def helmReleaseName = "spring-petclinic-${namespace}"

                    def encodedNamespace = URLEncoder.encode(namespace, "UTF-8")
                    def encodedReleaseName = URLEncoder.encode(helmReleaseName, "UTF-8")

                    def triggerUrl = "http://jenkins.tienminh.com:8080/job/delete_developer_build/buildWithParameters" +
                                     "?namespace=${encodedNamespace}&helmReleaseName=${encodedReleaseName}"

                    // Create a hyperlink to trigger delete review release
                    currentBuild.description = "[Click here to delete this review environment](${triggerUrl})"

                    echo "Manual cleanup link: ${triggerUrl}"
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning workspace...'
            cleanWs()
        }
    }
}